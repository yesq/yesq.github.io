{
    "docs": [
        {
            "location": "/", 
            "text": "Hello\n\n\nThis is my personal blog. Notes some thought in the process of learning.\n\n\nYou can contact me on \nTwitter\n.\n\n\nHow", 
            "title": "Hello"
        }, 
        {
            "location": "/#hello", 
            "text": "This is my personal blog. Notes some thought in the process of learning.  You can contact me on  Twitter .  How", 
            "title": "Hello"
        }, 
        {
            "location": "/How_to_build_a_blog/", 
            "text": "How to build a blog\n\n\nThis page will introduce the way I build this blog.\n\n\nIn my first plan, \nTravis CI\n will work as builder and publisher. But I didn't found a right way for saving ssh key in CI pipeline.\n\n\nNow, \nbuild\n will run local in \nDocker\n. \npublish\n is also run in local.\n\n\nSo, write in \nMarkdown\n. Build to \nHTML\n by \nMkdocs\n. Push to \nGithub Pages\n.\n\n\nWrite in Markdown\n\n\nWrite your blog in \nMarkdown\n formate. Save them in \n./docs/\n. Subfolder is ok. \n404\n page will show at first, if \n./docs/index.md\n absent.\n\n\nBuild by \nMkdocs\n\n\nMkdocs\n could build Markdown to Html. Running in Docker is the simplest way.\n\n\ndocker run --rm -it -v `pwd`:/docs squidfunk/mkdocs-material build\n\n\n\n\nScript above will create static HTML file in \n./site/\n. All you need is a file server.\n\n\nPush to \nGithub pages\n\n\nGithub could choose a repository as a file server. Follow site \nGithub pages\n to create one.\n\n\nWe will push content of \n./site/\n to your \nGithub pages\n later.\n\n\nAt first time, we need link \n./site/\n to \nGithub pages\n.\n\n\n$ cd ./site\n$ git init\n$ git remote add origin $YOUR_GITHUB_PAGES_REPOSITORY\n$ git add . \n git commit -m \ninit and force update blog\n \n git push --force --set-upstream origin master\n\n\n\n\nFrom now on, use \ngit add . \n git commit -m \"update blog\" \n git push\n to update blog everytime after build.\n\n\nWorkflow\n\n\nAll workspace \n./\n will hosted in a independent repo on Github. Commit Markdown file in this repo.\nAll static HTML file (\n./site/\n) hostd in \nGithub pages\n repo. Commit them to update blog.\n\n\nThanks for your attention.", 
            "title": "How to build a blog"
        }, 
        {
            "location": "/How_to_build_a_blog/#how-to-build-a-blog", 
            "text": "This page will introduce the way I build this blog.  In my first plan,  Travis CI  will work as builder and publisher. But I didn't found a right way for saving ssh key in CI pipeline.  Now,  build  will run local in  Docker .  publish  is also run in local.  So, write in  Markdown . Build to  HTML  by  Mkdocs . Push to  Github Pages .", 
            "title": "How to build a blog"
        }, 
        {
            "location": "/How_to_build_a_blog/#write-in-markdown", 
            "text": "Write your blog in  Markdown  formate. Save them in  ./docs/ . Subfolder is ok.  404  page will show at first, if  ./docs/index.md  absent.", 
            "title": "Write in Markdown"
        }, 
        {
            "location": "/How_to_build_a_blog/#build-by-mkdocs", 
            "text": "Mkdocs  could build Markdown to Html. Running in Docker is the simplest way.  docker run --rm -it -v `pwd`:/docs squidfunk/mkdocs-material build  Script above will create static HTML file in  ./site/ . All you need is a file server.", 
            "title": "Build by Mkdocs"
        }, 
        {
            "location": "/How_to_build_a_blog/#push-to-github-pages", 
            "text": "Github could choose a repository as a file server. Follow site  Github pages  to create one.  We will push content of  ./site/  to your  Github pages  later.  At first time, we need link  ./site/  to  Github pages .  $ cd ./site\n$ git init\n$ git remote add origin $YOUR_GITHUB_PAGES_REPOSITORY\n$ git add .   git commit -m  init and force update blog    git push --force --set-upstream origin master  From now on, use  git add .   git commit -m \"update blog\"   git push  to update blog everytime after build.", 
            "title": "Push to Github pages"
        }, 
        {
            "location": "/How_to_build_a_blog/#workflow", 
            "text": "All workspace  ./  will hosted in a independent repo on Github. Commit Markdown file in this repo.\nAll static HTML file ( ./site/ ) hostd in  Github pages  repo. Commit them to update blog.  Thanks for your attention.", 
            "title": "Workflow"
        }, 
        {
            "location": "/golang_net_http/", 
            "text": "Golang \nnet/http\n\n\n\u6574\u7406\u4e00\u4e0b \nnet/http\n \u7684\u7b80\u5355\u7528\u6cd5\u3002\n\n\nclient\n\n\n    resp, _ := http.Get(\nhttp://example.com/\n)\n    defer resp.Body.Close()\n    bs, _ := ioutil.ReadAll(resp.Body)\n    log.Println(string(bs))\n\n\n\n\nresp, err := http.Post(\nhttp://example.com/upload\n, \nimage/jpeg\n, \nbuf)\n\nresp, err := http.PostForm(\nhttp://example.com/form\n, url.Values{\nkey\n: {\nValue\n}, \nid\n: {\n123\n}})\n\n\n\n\n\u5982\u679c\u60f3\u66f4\u8be6\u7ec6\u7684\u63a7\u5236\u8bf7\u6c42\uff0c\u9700\u8981\u751f\u6210\u4e00\u4e2a Client \u5bf9\u8c61\u3002\n\n\n\u4e0a\u8fb9\u7684\u7528\u6cd5\u5b9e\u9645\u4e0a\u662f\u7528\u4e86\u9ed8\u8ba4\u7684 \nvar DefaultClient = \nClient{}\n\n\n    client := \nhttp.Client{}\n    resp, _ := client.Get(\nhttp://example.com\n)\n    defer resp.Body.Close()\n    bs, _ := ioutil.ReadAll(resp.Body)\n    log.Println(string(bs))\n\n\n\n\n\u53ef\u4ee5\u5728\u5b9a\u4e49 Client \u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570\u3002\u6bd4\u5982\u8d85\u65f6\u65f6\u95f4\uff0c\u4e0b\u5c42\u8bbe\u7f6e\u3002\n\n\n\u6216\u8005\u7528 \nhttp.NewRequest\n \u8fd4\u56de\u4e00\u4e2a request \u3002\n\u8be5 request \u5728\u88ab \nclient.Do(req)\n \u4e4b\u524d\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9b\u4e1c\u897f\u3002\n\n\nserver\n\n\nListenAndServe \u6307\u5b9a\u5730\u5740\u548c handler \u4e4b\u540e\uff0c\u53ef\u4ee5\u8d77\u4e00\u4e2a\u670d\u52a1\u5668\u3002\nhandler nil \u6307\u4f7f\u7528 DefaultServeMux \u3002\nHandle, HandleFunc \u53ef\u4ee5\u5411 DefaultServeMux \u6dfb\u52a0 handlers \u3002\n\n\n    http.Handle(\n/foo\n, fooHandler)\n\n    http.HandleFunc(\n/bar\n, func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintf(w, \nHello, %q\n, html.EscapeString(r.URL.Path))\n    })\n\n    log.Fatal(http.ListenAndServe(\n:8080\n, nil))\n\n\n\n\n\u81ea\u5b9a\u4e49 server\n\n\ns := \nhttp.Server{\n    Addr:           \n:8080\n,\n    Handler:        myHandler,\n    ReadTimeout:    10 * time.Second,\n    WriteTimeout:   10 * time.Second,\n    MaxHeaderBytes: 1 \n 20,\n}\nlog.Fatal(s.ListenAndServe())\n\n\n\n\nTODO: \u66f4\u590d\u6742\u7684\u7528\u6cd5\u3002\nTODO: \u8ddf\u6846\u67b6\u76f8\u6bd4\u3002", 
            "title": "Golang `net/http`"
        }, 
        {
            "location": "/golang_net_http/#golang-nethttp", 
            "text": "\u6574\u7406\u4e00\u4e0b  net/http  \u7684\u7b80\u5355\u7528\u6cd5\u3002", 
            "title": "Golang net/http"
        }, 
        {
            "location": "/golang_net_http/#client", 
            "text": "resp, _ := http.Get( http://example.com/ )\n    defer resp.Body.Close()\n    bs, _ := ioutil.ReadAll(resp.Body)\n    log.Println(string(bs))  resp, err := http.Post( http://example.com/upload ,  image/jpeg ,  buf)\n\nresp, err := http.PostForm( http://example.com/form , url.Values{ key : { Value },  id : { 123 }})  \u5982\u679c\u60f3\u66f4\u8be6\u7ec6\u7684\u63a7\u5236\u8bf7\u6c42\uff0c\u9700\u8981\u751f\u6210\u4e00\u4e2a Client \u5bf9\u8c61\u3002  \u4e0a\u8fb9\u7684\u7528\u6cd5\u5b9e\u9645\u4e0a\u662f\u7528\u4e86\u9ed8\u8ba4\u7684  var DefaultClient =  Client{}      client :=  http.Client{}\n    resp, _ := client.Get( http://example.com )\n    defer resp.Body.Close()\n    bs, _ := ioutil.ReadAll(resp.Body)\n    log.Println(string(bs))  \u53ef\u4ee5\u5728\u5b9a\u4e49 Client \u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570\u3002\u6bd4\u5982\u8d85\u65f6\u65f6\u95f4\uff0c\u4e0b\u5c42\u8bbe\u7f6e\u3002  \u6216\u8005\u7528  http.NewRequest  \u8fd4\u56de\u4e00\u4e2a request \u3002\n\u8be5 request \u5728\u88ab  client.Do(req)  \u4e4b\u524d\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9b\u4e1c\u897f\u3002", 
            "title": "client"
        }, 
        {
            "location": "/golang_net_http/#server", 
            "text": "ListenAndServe \u6307\u5b9a\u5730\u5740\u548c handler \u4e4b\u540e\uff0c\u53ef\u4ee5\u8d77\u4e00\u4e2a\u670d\u52a1\u5668\u3002\nhandler nil \u6307\u4f7f\u7528 DefaultServeMux \u3002\nHandle, HandleFunc \u53ef\u4ee5\u5411 DefaultServeMux \u6dfb\u52a0 handlers \u3002      http.Handle( /foo , fooHandler)\n\n    http.HandleFunc( /bar , func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintf(w,  Hello, %q , html.EscapeString(r.URL.Path))\n    })\n\n    log.Fatal(http.ListenAndServe( :8080 , nil))  \u81ea\u5b9a\u4e49 server  s :=  http.Server{\n    Addr:            :8080 ,\n    Handler:        myHandler,\n    ReadTimeout:    10 * time.Second,\n    WriteTimeout:   10 * time.Second,\n    MaxHeaderBytes: 1   20,\n}\nlog.Fatal(s.ListenAndServe())  TODO: \u66f4\u590d\u6742\u7684\u7528\u6cd5\u3002\nTODO: \u8ddf\u6846\u67b6\u76f8\u6bd4\u3002", 
            "title": "server"
        }, 
        {
            "location": "/golangs_lock/", 
            "text": "Golang's lock\n\n\nLearn usage of \nsync.Mutex\n from \nA Tour of Go\n.\n\n\npackage main\n\nimport (\n    \nfmt\n\n    \nsync\n\n    \ntime\n\n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n    v   map[string]int\n    mux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    c.v[key]++\n    c.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    defer c.mux.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    for i := 0; i \n 1000; i++ {\n        go c.Inc(\nsomekey\n)\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(c.Value(\nsomekey\n))\n}\n\n\n\n\nRun script above, we will get a number, \n1000\n. All is well.\n\n\nIf we comment \nc.mux.Lock()\n and \nc.mux.Unlock()\n(there are 4 lines above), we will get error \nfatal error: concurrent map writes\n.\n\n\nIf the exist struct don't have element \nsync.Mutex\n, could I put \nsync.Mutex\n in a global varite.\n\n\npackage main\n\nimport (\n    \nfmt\n\n    \nsync\n\n    \ntime\n\n)\n\ntype SafeCounter struct {\n    v map[string]int\n}\n\nvar lock sync.Mutex\n\nfunc (c *SafeCounter) Inc(key string) {\n    lock.Lock()\n    defer lock.Unlock()\n    c.v[key]++\n}\n\nfunc (c *SafeCounter) Value(key string) int {\n    lock.Lock()\n    defer lock.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    for i := 0; i \n 1000; i++ {\n        go c.Inc(\nsomekey\n)\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(c.Value(\nsomekey\n))\n}\n\n\n\n\nEverything is fine.", 
            "title": "Golang's lock"
        }, 
        {
            "location": "/golangs_lock/#golangs-lock", 
            "text": "Learn usage of  sync.Mutex  from  A Tour of Go .  package main\n\nimport (\n     fmt \n     sync \n     time \n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n    v   map[string]int\n    mux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    c.v[key]++\n    c.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    defer c.mux.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    for i := 0; i   1000; i++ {\n        go c.Inc( somekey )\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(c.Value( somekey ))\n}  Run script above, we will get a number,  1000 . All is well.  If we comment  c.mux.Lock()  and  c.mux.Unlock() (there are 4 lines above), we will get error  fatal error: concurrent map writes .  If the exist struct don't have element  sync.Mutex , could I put  sync.Mutex  in a global varite.  package main\n\nimport (\n     fmt \n     sync \n     time \n)\n\ntype SafeCounter struct {\n    v map[string]int\n}\n\nvar lock sync.Mutex\n\nfunc (c *SafeCounter) Inc(key string) {\n    lock.Lock()\n    defer lock.Unlock()\n    c.v[key]++\n}\n\nfunc (c *SafeCounter) Value(key string) int {\n    lock.Lock()\n    defer lock.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    for i := 0; i   1000; i++ {\n        go c.Inc( somekey )\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(c.Value( somekey ))\n}  Everything is fine.", 
            "title": "Golang's lock"
        }, 
        {
            "location": "/learn-k8s-in-seconds/", 
            "text": "Learn k8s in seconds\n\n\nConception\n\n\nDocuments\n\n\n\n\nPod: The basic unit, consist of one or more container. These containers share network and drive.\n\n\nDeployment: A pod status to keep. \n\n\n\n\nPod\n\n\nThe smallest and simplest unit in k8s. Pod could include one or more container, they share a \nClusterIP\n.\n\n\nUsually use controller(e.g., Deployments) manage Pod. But now we learn how to use Pod only.\n\n\npod.yml\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! \n sleep 3600']\n\n\n\n\napiVersion: v1\n declaration we use which version api.\n\n\nkind: Pod\n declaration the type of object.\n\n\nmetadata:\n set \nname\n and \nlabels\n.\n\n\nspec:\n define the specific of object. If type is Pod, \nspec\n should include a \ncontainers\n to define specific of container.\n\n\nTwo \nname\n of \ncontainers\n and \nmetadata\n is different. Metadata's name is unique name of pod in kubernetes. Containers' name will be a part of docker container's name.\n\n\nNow use \nkubectl\n communicate with kubernetes.\n\n\nkubectl get pods\n list all pods.\n\n\n$ kubectl get pods\nNAME        READY     STATUS    RESTARTS   AGE\nmyapp-pod   1/1       Running   0          1m\n# `kubectl get pods myapp-pod` could filte one pod by Pod name\n\n\n\n\nkubectl logs myapp-pod\n will show logs of the pod.\n\n\n$ kubectl logs myapp-pod\nHello Kubernetes!\n\n\n\n\nkubectl exec ...\n exec some thing.\n\n\n$ kubectl exec -it myapp-pod /bin/sh\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # exit\n$ kubectl exec -it myapp-pod pwd\n/\n$ kubectl exec -t myapp-pod pwd\n/\n\n\n\n\nNetwork will notes in \nService\n section.", 
            "title": "Learn k8s in seconds"
        }, 
        {
            "location": "/learn-k8s-in-seconds/#learn-k8s-in-seconds", 
            "text": "", 
            "title": "Learn k8s in seconds"
        }, 
        {
            "location": "/learn-k8s-in-seconds/#conception", 
            "text": "Documents   Pod: The basic unit, consist of one or more container. These containers share network and drive.  Deployment: A pod status to keep.", 
            "title": "Conception"
        }, 
        {
            "location": "/learn-k8s-in-seconds/#pod", 
            "text": "The smallest and simplest unit in k8s. Pod could include one or more container, they share a  ClusterIP .  Usually use controller(e.g., Deployments) manage Pod. But now we learn how to use Pod only.", 
            "title": "Pod"
        }, 
        {
            "location": "/learn-k8s-in-seconds/#podyml", 
            "text": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes!   sleep 3600']  apiVersion: v1  declaration we use which version api.  kind: Pod  declaration the type of object.  metadata:  set  name  and  labels .  spec:  define the specific of object. If type is Pod,  spec  should include a  containers  to define specific of container.  Two  name  of  containers  and  metadata  is different. Metadata's name is unique name of pod in kubernetes. Containers' name will be a part of docker container's name.  Now use  kubectl  communicate with kubernetes.  kubectl get pods  list all pods.  $ kubectl get pods\nNAME        READY     STATUS    RESTARTS   AGE\nmyapp-pod   1/1       Running   0          1m\n# `kubectl get pods myapp-pod` could filte one pod by Pod name  kubectl logs myapp-pod  will show logs of the pod.  $ kubectl logs myapp-pod\nHello Kubernetes!  kubectl exec ...  exec some thing.  $ kubectl exec -it myapp-pod /bin/sh\n/ # ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n/ # exit\n$ kubectl exec -it myapp-pod pwd\n/\n$ kubectl exec -t myapp-pod pwd\n/  Network will notes in  Service  section.", 
            "title": "pod.yml"
        }, 
        {
            "location": "/terraform_on_openstack/", 
            "text": "Terraform on OpenStack\n\n\nOpenStack could offer infrastructure for us. If we apply for a group of infrastructure, an agent talking to OpenStack is needed. That is \nTerraform\n. It also could works with other IaaS.\n\n\nWe gave Terraform a infrastructure blueprint in our mind, it will performs as you wish. Then change the blueprint, Terraform will do his best to complete blueprint base exist infrastructure.\n\n\nTerraform directory\n\n\nThis dirctory is a workspace. The blueprint file(\n.tf\n) and intermediate state file stored here. If you want maintain a group infrastructure for long time, you need save the whole directory. The absolute path of this directory is also changeless.\n\n\nTerraform file\n\n\nTerraform file(\n.tf\n) store the information of who you are and what you want.\n\n\nWho You Are\n\n\nDefine \nprovider\n to show who you are, just like below.\n\n\n# with password\nprovider \nopenstack\n {\n  user_name   = \nuser_name\n\n  password    = \npassword\n\n  auth_url    = \nhttp://1.1.1.1:5000/v3\n\n  region      = \nRegionOne\n\n  domain_id   = \ndefault\n\n  tenant_id = \naaaaaaaaaa\n\n}\n\n# with token\nprovider \nopenstack\n {\n  token       = \naaaaaaa\n\n  auth_url    = \nhttp://1.1.1.1:5000/v3\n\n  region      = \nRegionOne\n\n}\n\n\n\n\nMaybe we don't need option \ndomain_id\n in different \nOpenStack\n environment. If there are errors we can not figure out, we could remove \nregion\n, \ndomain_id\n to have a try.\n\n\nMore detail in \nDocuments\n\n\nWhat You Want\n\n\nDefine a network, subnet, router, sec group.\nCreate instances on this network.\n\n\nMore detail on \nDocuments\n and a \nblog\n\n\n#\n# Create a security group\n#\n\nresource \nopenstack_compute_secgroup_v2\n \ntf_sec_1\n {\n    region = \n\n    name = \nsec-name\n\n    description = \nSecurity Group For \n\n    rule {\n        from_port = 22\n        to_port = 22\n        ip_protocol = \ntcp\n\n        cidr = \n0.0.0.0/0\n\n    }\n    rule {\n        from_port = -1\n        to_port = -1\n        ip_protocol = \nicmp\n\n        cidr = \n0.0.0.0/0\n\n    }\n    rule {\n        from_port = 1\n        to_port = 65535\n        ip_protocol = \nudp\n\n        self = true\n    }\n    rule {\n        from_port = 1\n        to_port = 65535\n        ip_protocol = \ntcp\n\n        self = true\n    }\n    rule {\n        from_port = 443\n        to_port = 443\n        ip_protocol = \ntcp\n\n        cidr = \n0.0.0.0/0\n\n    }\n}\n\n\n#\n# Create a Network\n#\nresource \nopenstack_networking_network_v2\n \ntf_network\n {\n    region = \n\n    name = \nnetwork-name\n\n    admin_state_up = \ntrue\n\n}\n\nresource \nopenstack_networking_subnet_v2\n \ntf_net_sub1\n {\n    region = \n\n    name = \nsubnet-name\n\n    network_id = \n${openstack_networking_network_v2.tf_network.id}\n\n    cidr = \n192.168.1.0/24\n\n    ip_version = 4\n    dns_nameservers = [\n114.114.114.114\n, \n8.8.8.8\n]\n}\n\n#\n# Create a router for our network\n#\nresource \nopenstack_networking_router_v2\n \ntf_router1\n {\n    region = \n\n    name = \nrouter-name\n\n    admin_state_up = \ntrue\n\n    external_gateway = \n88787937-6924-4b36-b191-663e745a3666\n\n}\n\n#\n# Attach the Router to our Network via an Interface\n#\nresource \nopenstack_networking_router_interface_v2\n \ntf_rtr_if_1\n {\n    region = \n\n    router_id = \n${openstack_networking_router_v2.tf_router1.id}\n\n    subnet_id = \n${openstack_networking_subnet_v2.tf_net_sub1.id}\n\n}\n\n#\n# Create some Openstack Floating IP's for our VM's\n#\nresource \nopenstack_compute_floatingip_v2\n \nfip_1\n {\n    region = \n\n    pool = \nFloatingFrom\n\n}\n\nresource \nopenstack_compute_floatingip_associate_v2\n \nfip_1\n {\n  floating_ip = \n${openstack_compute_floatingip_v2.fip_1.address}\n\n  instance_id = \n${openstack_compute_instance_v2.master_instance.0.id}\n\n}\n\n# variable \ncluster_network_uuid\n {\n  # default = \n${openstack_networking_network_v2.tf_network.id}\n\n# }\n\n\nresource \nopenstack_compute_instance_v2\n \nmaster_instance\n {\n  count = 3\n  name  = \n${format(\nmaster-%02d\n, count.index)}\n\n  region    = \n\n  image_id  = \nvm-image-id\n\n  flavor_id = \nflavor-id\n\n  security_groups = [\nsec-name\n,\ndefault\n]\n  user_data = \n#!/bin/sh\\n touch file\n\n  config_drive = \ntrue\n\n\n  network {\n    uuid = \n${openstack_networking_network_v2.tf_network.id}\n\n  }\n}\n\nresource \nopenstack_compute_instance_v2\n \nnode_instance\n {\n  count = 0\n  name = \n${format(\nnode-%02d\n, count.index)}\n\n  region    = \n\n  image_id  = \nvm-image-id\n\n  flavor_id = \nflavor-id\n\n  security_groups = [\nsec-name\n,\ndefault\n]\n  user_data = \n#!/bin/sh\\n touch file\n\n  config_drive = \ntrue\n\n\n  network {\n    uuid = \n${openstack_networking_network_v2.tf_network.id}\n\n  }\n}\n\nresource \nopenstack_compute_instance_v2\n \nworker\n {\n  name      = \nworker\n\n  region    = \n\n  image_id  = \nvm-image-id\n\n  flavor_name = \nt2.4medium\n\n  security_groups = [\nsec-name\n,\ndefault\n]\n  user_data = \n#!/bin/sh\\n touch file\n\n  config_drive = \ntrue\n\n\n  network {\n    uuid = \n88787937-6924-4b36-b191-663e745a3666\n\n    name = \nOutNetwork\n\n  }\n\n  network {\n    uuid = \n${openstack_networking_network_v2.tf_network.id}\n\n  }\n}\n\n\noutput \nmaster_ips\n {\n  value = \n${openstack_compute_instance_v2.master_instance.*.network.0.fixed_ip_v4}\n\n}\noutput \nmaster_ids\n {\n  value = \n${openstack_compute_instance_v2.master_instance.*.id}\n\n}\noutput \nnode_ips\n {\n  value = \n${openstack_compute_instance_v2.node_instance.*.network.0.fixed_ip_v4}\n\n}\noutput \nnode_ids\n {\n  value = \n${openstack_compute_instance_v2.node_instance.*.id}\n\n}\noutput \nworker_ips_0\n {\n  value = \n${openstack_compute_instance_v2.worker.network.0.fixed_ip_v4}\n\n}\noutput \nworker_ips_1\n {\n  value = \n${openstack_compute_instance_v2.worker.network.1.fixed_ip_v4}\n\n}\noutput \nfloating_ip\n {\n  value = \n${openstack_compute_floatingip_associate_v2.fip_1.floating_ip}\n\n}\noutput \ninstance_network\n {\n  value = \n${openstack_compute_instance_v2.master_instance.0.network.0.uuid}\n\n} \noutput \nsubnet_id\n {\n  value = \n${openstack_networking_subnet_v2.tf_net_sub1.id}\n\n}\noutput \nrouter_id\n {\n  value = \n${openstack_networking_router_v2.tf_router1.id}\n\n}\noutput \nfloating_ip_id\n {\n  value = \n${openstack_compute_floatingip_v2.fip_1.id}\n\n}\noutput \nsec_id\n {\n  value = \n${openstack_compute_secgroup_v2.tf_sec_1.id}\n\n}\n\n\n\n\nTerraform CMD\n\n\nAfter define \n.tf\n in workspace. You need setup provider plugin. Follow \nDocument\n or copy plugin to \n/bin\n.\n\n\nRun \nterraform init\n, \nterraform plan\n and \nterraform apply\n.\n\n\nYou will see output final.", 
            "title": "Terraform on OpenStack"
        }, 
        {
            "location": "/terraform_on_openstack/#terraform-on-openstack", 
            "text": "OpenStack could offer infrastructure for us. If we apply for a group of infrastructure, an agent talking to OpenStack is needed. That is  Terraform . It also could works with other IaaS.  We gave Terraform a infrastructure blueprint in our mind, it will performs as you wish. Then change the blueprint, Terraform will do his best to complete blueprint base exist infrastructure.", 
            "title": "Terraform on OpenStack"
        }, 
        {
            "location": "/terraform_on_openstack/#terraform-directory", 
            "text": "This dirctory is a workspace. The blueprint file( .tf ) and intermediate state file stored here. If you want maintain a group infrastructure for long time, you need save the whole directory. The absolute path of this directory is also changeless.", 
            "title": "Terraform directory"
        }, 
        {
            "location": "/terraform_on_openstack/#terraform-file", 
            "text": "Terraform file( .tf ) store the information of who you are and what you want.", 
            "title": "Terraform file"
        }, 
        {
            "location": "/terraform_on_openstack/#who-you-are", 
            "text": "Define  provider  to show who you are, just like below.  # with password\nprovider  openstack  {\n  user_name   =  user_name \n  password    =  password \n  auth_url    =  http://1.1.1.1:5000/v3 \n  region      =  RegionOne \n  domain_id   =  default \n  tenant_id =  aaaaaaaaaa \n}\n\n# with token\nprovider  openstack  {\n  token       =  aaaaaaa \n  auth_url    =  http://1.1.1.1:5000/v3 \n  region      =  RegionOne \n}  Maybe we don't need option  domain_id  in different  OpenStack  environment. If there are errors we can not figure out, we could remove  region ,  domain_id  to have a try.  More detail in  Documents", 
            "title": "Who You Are"
        }, 
        {
            "location": "/terraform_on_openstack/#what-you-want", 
            "text": "Define a network, subnet, router, sec group.\nCreate instances on this network.  More detail on  Documents  and a  blog  #\n# Create a security group\n#\n\nresource  openstack_compute_secgroup_v2   tf_sec_1  {\n    region =  \n    name =  sec-name \n    description =  Security Group For  \n    rule {\n        from_port = 22\n        to_port = 22\n        ip_protocol =  tcp \n        cidr =  0.0.0.0/0 \n    }\n    rule {\n        from_port = -1\n        to_port = -1\n        ip_protocol =  icmp \n        cidr =  0.0.0.0/0 \n    }\n    rule {\n        from_port = 1\n        to_port = 65535\n        ip_protocol =  udp \n        self = true\n    }\n    rule {\n        from_port = 1\n        to_port = 65535\n        ip_protocol =  tcp \n        self = true\n    }\n    rule {\n        from_port = 443\n        to_port = 443\n        ip_protocol =  tcp \n        cidr =  0.0.0.0/0 \n    }\n}\n\n\n#\n# Create a Network\n#\nresource  openstack_networking_network_v2   tf_network  {\n    region =  \n    name =  network-name \n    admin_state_up =  true \n}\n\nresource  openstack_networking_subnet_v2   tf_net_sub1  {\n    region =  \n    name =  subnet-name \n    network_id =  ${openstack_networking_network_v2.tf_network.id} \n    cidr =  192.168.1.0/24 \n    ip_version = 4\n    dns_nameservers = [ 114.114.114.114 ,  8.8.8.8 ]\n}\n\n#\n# Create a router for our network\n#\nresource  openstack_networking_router_v2   tf_router1  {\n    region =  \n    name =  router-name \n    admin_state_up =  true \n    external_gateway =  88787937-6924-4b36-b191-663e745a3666 \n}\n\n#\n# Attach the Router to our Network via an Interface\n#\nresource  openstack_networking_router_interface_v2   tf_rtr_if_1  {\n    region =  \n    router_id =  ${openstack_networking_router_v2.tf_router1.id} \n    subnet_id =  ${openstack_networking_subnet_v2.tf_net_sub1.id} \n}\n\n#\n# Create some Openstack Floating IP's for our VM's\n#\nresource  openstack_compute_floatingip_v2   fip_1  {\n    region =  \n    pool =  FloatingFrom \n}\n\nresource  openstack_compute_floatingip_associate_v2   fip_1  {\n  floating_ip =  ${openstack_compute_floatingip_v2.fip_1.address} \n  instance_id =  ${openstack_compute_instance_v2.master_instance.0.id} \n}\n\n# variable  cluster_network_uuid  {\n  # default =  ${openstack_networking_network_v2.tf_network.id} \n# }\n\n\nresource  openstack_compute_instance_v2   master_instance  {\n  count = 3\n  name  =  ${format( master-%02d , count.index)} \n  region    =  \n  image_id  =  vm-image-id \n  flavor_id =  flavor-id \n  security_groups = [ sec-name , default ]\n  user_data =  #!/bin/sh\\n touch file \n  config_drive =  true \n\n  network {\n    uuid =  ${openstack_networking_network_v2.tf_network.id} \n  }\n}\n\nresource  openstack_compute_instance_v2   node_instance  {\n  count = 0\n  name =  ${format( node-%02d , count.index)} \n  region    =  \n  image_id  =  vm-image-id \n  flavor_id =  flavor-id \n  security_groups = [ sec-name , default ]\n  user_data =  #!/bin/sh\\n touch file \n  config_drive =  true \n\n  network {\n    uuid =  ${openstack_networking_network_v2.tf_network.id} \n  }\n}\n\nresource  openstack_compute_instance_v2   worker  {\n  name      =  worker \n  region    =  \n  image_id  =  vm-image-id \n  flavor_name =  t2.4medium \n  security_groups = [ sec-name , default ]\n  user_data =  #!/bin/sh\\n touch file \n  config_drive =  true \n\n  network {\n    uuid =  88787937-6924-4b36-b191-663e745a3666 \n    name =  OutNetwork \n  }\n\n  network {\n    uuid =  ${openstack_networking_network_v2.tf_network.id} \n  }\n}\n\n\noutput  master_ips  {\n  value =  ${openstack_compute_instance_v2.master_instance.*.network.0.fixed_ip_v4} \n}\noutput  master_ids  {\n  value =  ${openstack_compute_instance_v2.master_instance.*.id} \n}\noutput  node_ips  {\n  value =  ${openstack_compute_instance_v2.node_instance.*.network.0.fixed_ip_v4} \n}\noutput  node_ids  {\n  value =  ${openstack_compute_instance_v2.node_instance.*.id} \n}\noutput  worker_ips_0  {\n  value =  ${openstack_compute_instance_v2.worker.network.0.fixed_ip_v4} \n}\noutput  worker_ips_1  {\n  value =  ${openstack_compute_instance_v2.worker.network.1.fixed_ip_v4} \n}\noutput  floating_ip  {\n  value =  ${openstack_compute_floatingip_associate_v2.fip_1.floating_ip} \n}\noutput  instance_network  {\n  value =  ${openstack_compute_instance_v2.master_instance.0.network.0.uuid} \n} \noutput  subnet_id  {\n  value =  ${openstack_networking_subnet_v2.tf_net_sub1.id} \n}\noutput  router_id  {\n  value =  ${openstack_networking_router_v2.tf_router1.id} \n}\noutput  floating_ip_id  {\n  value =  ${openstack_compute_floatingip_v2.fip_1.id} \n}\noutput  sec_id  {\n  value =  ${openstack_compute_secgroup_v2.tf_sec_1.id} \n}", 
            "title": "What You Want"
        }, 
        {
            "location": "/terraform_on_openstack/#terraform-cmd", 
            "text": "After define  .tf  in workspace. You need setup provider plugin. Follow  Document  or copy plugin to  /bin .  Run  terraform init ,  terraform plan  and  terraform apply .  You will see output final.", 
            "title": "Terraform CMD"
        }, 
        {
            "location": "/trans_golang_net_http/", 
            "text": "Don\u2019t use Go\u2019s default HTTP client (in production)\n\n\n\u7ffb\u8bd1/\u7b14\u8bb0 \nhttps://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779\n\n\n\u53ea\u7528\u7b80\u5355\u7684 \nhttp.Get\n \u5c31\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u5f97\u5230\u76f8\u5e94\u3002\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\u5f53\u670d\u52a1\u7aef\u6302\u8d77\u4f60\u7684\u8bf7\u6c42\uff0c\u4f60\u7684\b\u7a0b\u5e8f\u5c06\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\u3002\n\n\n\u8bc1\u660e\n\n\n  svr := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    time.Sleep(time.Hour)\n  }))\n  defer svr.Close()\n  fmt.Println(\u201cmaking request\u201d)\n  http.Get(svr.URL)\n  fmt.Println(\u201cfinished request\u201d)\n\n\n\n\n\u670d\u52a1\u7aef\u54cd\u5e94\u4e4b\u524d\u7b49\u5f85 1 \u5c0f\u65f6\u3002\b\u7528\u9ed8\u8ba4 Client \u53d1\u9001\u7684\u8bf7\u6c42\u4f1a\u4e00\u76f4\u7b49\u4e0b\u53bb\u3002\n\n\n\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\n\n    var netClient = \nhttp.Client{\n        Timeout: time.Second * 10,\n    }\n\n\n\n\n\u5982\u679c\u60f3\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u6574\u4e2a\u8bf7\u6c42\u751f\u547d\u5468\u671f\u3002\n\u53ef\u4ee5\u81ea\u5b9a\u4e49 \nnet.Transport\n, \nnet.Dialer\n\u3002\n\n\n    var netTransport = \nhttp.Transport{\n    Dial: (\nnet.Dialer{\n        Timeout: 5 * time.Second,\n    }).Dial,\n    TLSHandshakeTimeout: 5 * time.Second,\n    }\n    var netClient = \nhttp.Client{\n    Timeout: time.Second * 10,\n    Transport: netTransport,\n    }\n    response, _ := netClient.Get(url)", 
            "title": "Don\u2019t use Go\u2019s default HTTP client (in production)"
        }, 
        {
            "location": "/trans_golang_net_http/#dont-use-gos-default-http-client-in-production", 
            "text": "\u7ffb\u8bd1/\u7b14\u8bb0  https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779  \u53ea\u7528\u7b80\u5355\u7684  http.Get  \u5c31\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u5f97\u5230\u76f8\u5e94\u3002\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\u5f53\u670d\u52a1\u7aef\u6302\u8d77\u4f60\u7684\u8bf7\u6c42\uff0c\u4f60\u7684\b\u7a0b\u5e8f\u5c06\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\u3002  \u8bc1\u660e    svr := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    time.Sleep(time.Hour)\n  }))\n  defer svr.Close()\n  fmt.Println(\u201cmaking request\u201d)\n  http.Get(svr.URL)\n  fmt.Println(\u201cfinished request\u201d)  \u670d\u52a1\u7aef\u54cd\u5e94\u4e4b\u524d\u7b49\u5f85 1 \u5c0f\u65f6\u3002\b\u7528\u9ed8\u8ba4 Client \u53d1\u9001\u7684\u8bf7\u6c42\u4f1a\u4e00\u76f4\u7b49\u4e0b\u53bb\u3002  \u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002      var netClient =  http.Client{\n        Timeout: time.Second * 10,\n    }  \u5982\u679c\u60f3\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u6574\u4e2a\u8bf7\u6c42\u751f\u547d\u5468\u671f\u3002\n\u53ef\u4ee5\u81ea\u5b9a\u4e49  net.Transport ,  net.Dialer \u3002      var netTransport =  http.Transport{\n    Dial: ( net.Dialer{\n        Timeout: 5 * time.Second,\n    }).Dial,\n    TLSHandshakeTimeout: 5 * time.Second,\n    }\n    var netClient =  http.Client{\n    Timeout: time.Second * 10,\n    Transport: netTransport,\n    }\n    response, _ := netClient.Get(url)", 
            "title": "Don\u2019t use Go\u2019s default HTTP client (in production)"
        }, 
        {
            "location": "/trans_http_request/", 
            "text": "Making concurrent HTTP requests in Go programming language\n\n\nhttps://blog.narenarya.in/concurrent-http-in-go.html\n\n\n\u8c8c\u4f3c\u6ca1\u5565\u5199\u7684...\n\n\n\u6bcf\u4e2a\u8bf7\u6c42\u5f00\u4e00\u4e2a goroutines \u3002\u6bcf\u4e2a\u8bf7\u6c42\u628a\u54cd\u5e94\u5f80\u4e00\u4e2a\u6ca1\u6709\u7f13\u51b2\u7684 channle \u91cc\u585e\u3002\n\n\n\u903b\u8f91\u4e0a\u5c31\u662f\u6240\u6709\u8bf7\u6c42\u540c\u65f6\u7b49\u5f85\u54cd\u5e94\u3002\n\n\n\u8c01\u5148\u62ff\u5230\u54cd\u5e94\uff0c\u8c01\u5148\u628a\u54cd\u5e94\u585e\u8fdb channle \u3002main \u4e2d\u8bfb\u53d6\u8fd9\u4e2a\u54cd\u5e94\u4e4b\u524d\uff0c\u5176\u4ed6\u5df2\u7ecf\u62ff\u5230\u54cd\u5e94\u7684 goroutines \u7b49\u5f85\u3002", 
            "title": "Making concurrent HTTP requests in Go programming language"
        }, 
        {
            "location": "/trans_http_request/#making-concurrent-http-requests-in-go-programming-language", 
            "text": "https://blog.narenarya.in/concurrent-http-in-go.html  \u8c8c\u4f3c\u6ca1\u5565\u5199\u7684...  \u6bcf\u4e2a\u8bf7\u6c42\u5f00\u4e00\u4e2a goroutines \u3002\u6bcf\u4e2a\u8bf7\u6c42\u628a\u54cd\u5e94\u5f80\u4e00\u4e2a\u6ca1\u6709\u7f13\u51b2\u7684 channle \u91cc\u585e\u3002  \u903b\u8f91\u4e0a\u5c31\u662f\u6240\u6709\u8bf7\u6c42\u540c\u65f6\u7b49\u5f85\u54cd\u5e94\u3002  \u8c01\u5148\u62ff\u5230\u54cd\u5e94\uff0c\u8c01\u5148\u628a\u54cd\u5e94\u585e\u8fdb channle \u3002main \u4e2d\u8bfb\u53d6\u8fd9\u4e2a\u54cd\u5e94\u4e4b\u524d\uff0c\u5176\u4ed6\u5df2\u7ecf\u62ff\u5230\u54cd\u5e94\u7684 goroutines \u7b49\u5f85\u3002", 
            "title": "Making concurrent HTTP requests in Go programming language"
        }, 
        {
            "location": "/trans_io_reader/", 
            "text": "io.Reader in depth\n\n\n\u7ffb\u8bd1\u4e00\u7bc7\u535a\u5ba2\u3002\u6df1\u5165\u4e86\u89e3 \nio.Reader\n\n\nhttps://medium.com/@matryer/golang-advent-calendar-day-seventeen-io-reader-in-depth-6f744bb4320b\n\n\n\u5e76\u4e0d\u4f1a\u9010\u5b57\u9010\u53e5\u7ffb\u8bd1\uff0c\u57fa\u672c\u4e0a\u7b97\u662f\u4e2a\u7b14\u8bb0...\n\n\n\n\n\n\nio.Reader\n \u662f\u4ec0\u4e48\n\n\n\u5e38\u7528\u7684\u54ea\u4e9b\u5bf9\u8c61\u3001\u7c7b\u578b\u662f \nio.Reader\n\n\n\u5982\u4f55\u64cd\u4f5c \nio.Reader\n\n\n\u4e3a\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u628a \nio.Reader\n \u653e\u5230\u81ea\u5df1\u7684\u8bbe\u8ba1\u4e2d\n\n\n\n\nio.Reader\n \u662f\u4ec0\u4e48\n\n\n\u5b57\u9762\u4e0a\u662f\u5982\u4e0b\u5b9a\u4e49\u7684 \ninterface\n\u3002\u4ece\u8bed\u4e49\u4e0a\u6765\u8bf4\u4e5f\u5c31\u662f\u5b9e\u73b0\u4e86 \nRead\n \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002\n\n\ntype Reader interface {\n  Read(p []byte) (n int, err error)\n}\n\n\n\n\n\u8bfb\u5230\u7684\u5185\u5bb9\u586b\u8fdb \np []byte\n\u3002\u6210\u529f\u65f6\uff0cn \u662f\u6210\u529f\u6570\u91cf\u3002\u4e00\u4e2a\u90fd\u8bfb\u4e0d\u5230\u7684\u65f6\u5019\uff0c\u8fd4\u56de EOF\u3002\n\n\n\u6240\u4ee5\u62ff\u5230 Reader \u5c31\u53ef\u4ee5\u7edf\u4e00\u6267\u884c .Read \u52a8\u4f5c\u3002\n\n\n\u54ea\u4e9b\u5e38\u89c1\u7684\u5bf9\u8c61\u662f \nio.Reader\n\n\nvar r io.Reader\nvar err error\nr, err = os.Open(\nfile.txt\n)\n\n\n\n\nos.Open\n \u8fd4\u56de\u7684\u662f\u4e00\u4e2a \nos.File\n \u5bf9\u8c61\u3002\u4ed6\u5b9e\u73b0\u4e86 \nRead\n \u65b9\u6cd5\u3002\n\u6240\u4ee5\u4ed6\u4e5f\u53ef\u4ee5\u662f \nReader\n \u3002\n\n\nvar r io.Reader\nr = strings.NewReader(\naaaa\n)\n\n\n\n\nvar r io.Reader\nr = request.Body\n\n\n\n\nvar r io.Reader\nvar buf bytes.Buffer\nr = \nbuf\n\n\n\n\nReaders \u90fd\u6709\u54ea\u4e9b\u64cd\u4f5c\n\n\n\n\n\u76f4\u63a5\u8c03\u7528 .Read \u65b9\u6cd5\uff0c\u5411 slice \u91cc\u704c\u6570\u636e\u3002\u4f46\u662f\u8981\u81ea\u5df1\u63a7\u5236 buff\n\n\n\u7528 ioutil.ReadAll \u5c06\u5185\u5bb9\u5168\u90e8\u8bfb\u51fa\u6765\u3002\n\n\n\u5f80\u53e6\u4e00\u4e2a writer \u91cc\u62f7\u8d1d\n\n\n\u4ece reader \u91cc decode json \u5bf9\u8c61\u3002\n\n\n\u89e3\u538b\u7f29\n\n\n\n\np := make([]byte, 256)\nn, err := r.Read(p)\n\n\n\n\n\u4e00\u4e0b\u5168\u8bfb\u4e86 \n\n\nb, err := ioutil.ReadAll(r)\n\n\n\u62f7\u8d1d\u5230\u4e00\u4e2a writer \nn, err := io.Copy(w, r)\n\n\njson \u89e3\u7801 \nerr := json.NewDecoder(r).Decode(v)\n\n\n\u89e3\u538b\u7f29 \nr = gzip.NewReader(r)\n\n\n\u628a \nio.Reader\n \u653e\u5230\u81ea\u5df1\u7684\u8bbe\u8ba1\u4e2d\n\n\n\u6bd4\u5982\u4e00\u4e2a\u53cd\u8f6c\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u3002\n\n\nfunc Reverse(s string) (string, error)\n\n\nfunc Reverse(r io.Reader) io.Reader\n\n\n\u5982\u679c\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002\u5728\u8c03\u7528 \nReverse\n \u7684\u5730\u65b9\uff0c\u9700\u8981\u5224\u65ad\u6570\u636e\u6765\u6e90\u3002\n\u7136\u540e\u7528\u4e0d\u540c\u65b9\u5f0f\uff0c\u8f6c\u6362\u6210 \nstring\n \u3002\u6700\u7ec8\u4f1a\u6709\u4e00\u5768 if/switch \u8bed\u53e5\u3002\n\n\n\u5982\u679c\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002\u4f20\u8fdb\u6765\u7684 \nReader\n \u81ea\u5df1\u5b9a\u4e49\u597d\n.Read\n \u65b9\u6cd5\u3002\n\u53ea\u7ba1\u5f80\u578b\u53c2\u91cc\u4ecd \nReader\n \u3002\u4ee3\u7801\u7b80\u6d01\u6e05\u6670\u3002\n\n\nr = Reverse(strings.NewReader(\nMake me backwards\n))\n\n\n\n\nf, err := os.Open(\nfile.txt\n)\nif err != nil {\n  log.Fatalln(err)\n}\nr = Reverse(f)\n\n\n\n\nfunc handle(w http.ResponseWriter, r *http.Request) {\n  rev := Reverse(r.Body)\n  // etc...\n}", 
            "title": "io.Reader in depth"
        }, 
        {
            "location": "/trans_io_reader/#ioreader-in-depth", 
            "text": "\u7ffb\u8bd1\u4e00\u7bc7\u535a\u5ba2\u3002\u6df1\u5165\u4e86\u89e3  io.Reader  https://medium.com/@matryer/golang-advent-calendar-day-seventeen-io-reader-in-depth-6f744bb4320b  \u5e76\u4e0d\u4f1a\u9010\u5b57\u9010\u53e5\u7ffb\u8bd1\uff0c\u57fa\u672c\u4e0a\u7b97\u662f\u4e2a\u7b14\u8bb0...    io.Reader  \u662f\u4ec0\u4e48  \u5e38\u7528\u7684\u54ea\u4e9b\u5bf9\u8c61\u3001\u7c7b\u578b\u662f  io.Reader  \u5982\u4f55\u64cd\u4f5c  io.Reader  \u4e3a\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u628a  io.Reader  \u653e\u5230\u81ea\u5df1\u7684\u8bbe\u8ba1\u4e2d", 
            "title": "io.Reader in depth"
        }, 
        {
            "location": "/trans_io_reader/#ioreader", 
            "text": "\u5b57\u9762\u4e0a\u662f\u5982\u4e0b\u5b9a\u4e49\u7684  interface \u3002\u4ece\u8bed\u4e49\u4e0a\u6765\u8bf4\u4e5f\u5c31\u662f\u5b9e\u73b0\u4e86  Read  \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002  type Reader interface {\n  Read(p []byte) (n int, err error)\n}  \u8bfb\u5230\u7684\u5185\u5bb9\u586b\u8fdb  p []byte \u3002\u6210\u529f\u65f6\uff0cn \u662f\u6210\u529f\u6570\u91cf\u3002\u4e00\u4e2a\u90fd\u8bfb\u4e0d\u5230\u7684\u65f6\u5019\uff0c\u8fd4\u56de EOF\u3002  \u6240\u4ee5\u62ff\u5230 Reader \u5c31\u53ef\u4ee5\u7edf\u4e00\u6267\u884c .Read \u52a8\u4f5c\u3002", 
            "title": "io.Reader \u662f\u4ec0\u4e48"
        }, 
        {
            "location": "/trans_io_reader/#ioreader_1", 
            "text": "var r io.Reader\nvar err error\nr, err = os.Open( file.txt )  os.Open  \u8fd4\u56de\u7684\u662f\u4e00\u4e2a  os.File  \u5bf9\u8c61\u3002\u4ed6\u5b9e\u73b0\u4e86  Read  \u65b9\u6cd5\u3002\n\u6240\u4ee5\u4ed6\u4e5f\u53ef\u4ee5\u662f  Reader  \u3002  var r io.Reader\nr = strings.NewReader( aaaa )  var r io.Reader\nr = request.Body  var r io.Reader\nvar buf bytes.Buffer\nr =  buf", 
            "title": "\u54ea\u4e9b\u5e38\u89c1\u7684\u5bf9\u8c61\u662f io.Reader"
        }, 
        {
            "location": "/trans_io_reader/#readers", 
            "text": "\u76f4\u63a5\u8c03\u7528 .Read \u65b9\u6cd5\uff0c\u5411 slice \u91cc\u704c\u6570\u636e\u3002\u4f46\u662f\u8981\u81ea\u5df1\u63a7\u5236 buff  \u7528 ioutil.ReadAll \u5c06\u5185\u5bb9\u5168\u90e8\u8bfb\u51fa\u6765\u3002  \u5f80\u53e6\u4e00\u4e2a writer \u91cc\u62f7\u8d1d  \u4ece reader \u91cc decode json \u5bf9\u8c61\u3002  \u89e3\u538b\u7f29   p := make([]byte, 256)\nn, err := r.Read(p)  \u4e00\u4e0b\u5168\u8bfb\u4e86   b, err := ioutil.ReadAll(r)  \u62f7\u8d1d\u5230\u4e00\u4e2a writer  n, err := io.Copy(w, r)  json \u89e3\u7801  err := json.NewDecoder(r).Decode(v)  \u89e3\u538b\u7f29  r = gzip.NewReader(r)", 
            "title": "Readers \u90fd\u6709\u54ea\u4e9b\u64cd\u4f5c"
        }, 
        {
            "location": "/trans_io_reader/#ioreader_2", 
            "text": "\u6bd4\u5982\u4e00\u4e2a\u53cd\u8f6c\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u3002  func Reverse(s string) (string, error)  func Reverse(r io.Reader) io.Reader  \u5982\u679c\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002\u5728\u8c03\u7528  Reverse  \u7684\u5730\u65b9\uff0c\u9700\u8981\u5224\u65ad\u6570\u636e\u6765\u6e90\u3002\n\u7136\u540e\u7528\u4e0d\u540c\u65b9\u5f0f\uff0c\u8f6c\u6362\u6210  string  \u3002\u6700\u7ec8\u4f1a\u6709\u4e00\u5768 if/switch \u8bed\u53e5\u3002  \u5982\u679c\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002\u4f20\u8fdb\u6765\u7684  Reader  \u81ea\u5df1\u5b9a\u4e49\u597d .Read  \u65b9\u6cd5\u3002\n\u53ea\u7ba1\u5f80\u578b\u53c2\u91cc\u4ecd  Reader  \u3002\u4ee3\u7801\u7b80\u6d01\u6e05\u6670\u3002  r = Reverse(strings.NewReader( Make me backwards ))  f, err := os.Open( file.txt )\nif err != nil {\n  log.Fatalln(err)\n}\nr = Reverse(f)  func handle(w http.ResponseWriter, r *http.Request) {\n  rev := Reverse(r.Body)\n  // etc...\n}", 
            "title": "\u628a io.Reader \u653e\u5230\u81ea\u5df1\u7684\u8bbe\u8ba1\u4e2d"
        }
    ]
}